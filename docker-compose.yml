version: '3.8'

services:
  # ========================================
  # MONGODB DATABASE
  # ========================================
  mongodb:
    image: mongo:6.0
    container_name: ai-versant-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-suma_madam}
    volumes:
      - mongodb_data:/data/db
      - ./backend/init_database.py:/docker-entrypoint-initdb.d/init_database.py:ro
    networks:
      - ai-versant-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ========================================
  # BACKEND API
  # ========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-versant-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      # Database
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGO_DATABASE:-suma_madam}?authSource=admin
      
      # JWT
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-versant_jwt_secret_key_2024_secure_and_unique}
      
      # AWS S3
      AWS_ACCESS_KEY: ${AWS_ACCESS_KEY}
      AWS_SECRET_KEY: ${AWS_SECRET_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Email Service (Brevo)
      BREVO_API_KEY: ${BREVO_API_KEY}
      BREVO_SENDER_EMAIL: ${BREVO_SENDER_EMAIL}
      BREVO_SENDER_NAME: ${BREVO_SENDER_NAME:-AI-VERSANT}
      
      # SMS Service (BulkSMS)
      BULKSMS_USERNAME: ${BULKSMS_USERNAME}
      BULKSMS_PASSWORD: ${BULKSMS_PASSWORD}
      
      # CORS
      ALLOW_ALL_CORS: ${ALLOW_ALL_CORS:-true}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173,https://crt.pydahsoft.in}
      
      # Server
      PORT: 8000
      FLASK_ENV: ${FLASK_ENV:-production}
      
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-versant-network
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ========================================
  # FRONTEND WEB APP
  # ========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
        VITE_SOCKET_IO_URL: ${VITE_SOCKET_IO_URL:-http://localhost:8000}
    container_name: ai-versant-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-versant-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ========================================
  # NGINX REVERSE PROXY (Optional)
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: ai-versant-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - ai-versant-network
    profiles:
      - production

  # ========================================
  # REDIS CACHE
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: ai-versant-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-versant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # NOTIFICATION SERVICE
  # ========================================
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: ai-versant-notification-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Server
      PORT: 3001
      NODE_ENV: production
      LOG_LEVEL: info
      
      # Database (MongoDB only - no Redis needed)
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/versant_notifications?authSource=admin
      
      # API Security
      NOTIFICATION_API_KEYS: ${NOTIFICATION_API_KEYS:-versant-notification-api-key}
      
      # CORS
      ALLOWED_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000,https://crt.pydahsoft.in}
      
      # Email Service (Brevo) - Same as backend
      BREVO_API_KEY: ${BREVO_API_KEY}
      SENDER_EMAIL: ${BREVO_SENDER_EMAIL:-noreply@versant.com}
      SENDER_NAME: ${BREVO_SENDER_NAME:-VERSANT System}
      
      # SMS Service (BulkSMS) - Only API key needed
      BULKSMS_API_KEY: ${BULKSMS_API_KEY}
      BULKSMS_SENDER_ID: ${BULKSMS_SENDER_ID:-VERSANT}
      BULKSMS_API_URL: ${BULKSMS_API_URL:-https://www.bulksmsapps.com/api/apismsv2.aspx}
      
      # Push Notifications (VAPID)
      VAPID_SUBJECT: ${VAPID_SUBJECT:-mailto:admin@versant.com}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ai-versant-network
    volumes:
      - notification_logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  mongodb_data:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local
  notification_logs:
    driver: local

networks:
  ai-versant-network:
    driver: bridge
